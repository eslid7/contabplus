<% include partials/header %>
	<!-- BEGIN PAGE -->
	<div class="page-content">
			<!-- BEGIN PAGE CONTAINER-->
			<div class="container-fluid">
				<!-- BEGIN PAGE HEADER-->
				<div class="row-fluid">
					<div class="span12">
						<h3>Movimientos por Cuenta </h3>
					</div>
				</div>

				<div class="row-fluid">
						<div class="span12">
							<!-- BEGIN EXAMPLE TABLE PORTLET-->
							<div class="portlet box light-grey">
								<div class="portlet-title">
									
								</div>
								<div class="portlet-body">									
                                    <form id="report" name="report" action="#">                                        
                                        <input type="hidden" id="accId" name="accId">
                                        <div class="row-fluid">
                                            <div class="control-group span4">
                                                <label for="accCode">
                                                    Empresa
                                                </label>
                                                <div class="controls">
                                                    <% if(business.length == 0) { %>   
                                                        No hay empresas disponibles
                                                    <%} else {%>
                                                    <select id="busId" name="busId" class="span12 select2">   
                                                        <% for(var j = 0; j < business.length; j++) { %>   
                                                            <option value="<%=business[j].busId%>"> <%=business[j].busName%></option>
                                                        <% }%>
                                                    </select>
                                                    <% }%>
                                                </div>
                                            </div>                                                                                      
                                            <div class="control-group span3 ">
                                                <label for="accCode">
                                                    Fecha de registro
                                                </label>
                                                <input type="hidden" name="date_from" 	id="date_from">
                                                <input type="hidden" name="date_to" 	id="date_to">
                                                <div id="fdate" class="btn">
                                                    <i class="icon-calendar"></i>
                                                    &nbsp;<span></span>
                                                    <b class="caret"></b>
                                                </div>
                                            </div> 
                                        </div> 
                                        <div class="row-fluid">
                                            <div class="control-group span3">
                                                <label for="accountId">
                                                    Código de Cuenta
                                                </label>
                                                <div class="controls">
                                                    <input type="hidden" id="aacCode" name="aacCode" >
                                                    <input type="text" name="accountId" id="accountId" class="span12 numeric accountId" maxlength="25">                                                   
                                                </div>
                                            </div>
                                            <div class="control-group span3">
                                                <label>
                                                   Nombre Cuenta
                                                </label>
                                                <div class="controls" id="divTextAccount">
                                                    
                                                </div>
                                            </div>
                                            <div class="control-group span2">
                                                <label for="aasNumberSeat" id="aasNumberSeatLabel">
                                                    N Asiento
                                                </label>
                                                <div class="controls"  > 
                                                    <input type="text" name="aasNumberSeat" id="aasNumberSeat" class="span12" maxlength="10">                                                   
                                                </div>
                                            </div>
                                            <div class="control-group span4">
                                                <label for="accCode">
                                                    Nombre del Asiento
                                                </label>
                                                <div class="controls"  > 
                                                    <input type="text" name="aasNameSeat" id="aasNameSeat" class="span12" maxlength="65">                                                   
                                                </div>
                                            </div>
                                        </div>                                       
                                    </form>
                                    <div style="overflow-x: scroll;">
                                        <div class="btn-group  span2">
                                            <button id="exporttable" type="button" class="btn ">Exportar a Excel <i class="icon-angle-down"></i>
                                            </button>
                                        </div>
                                        <div style="width: 2400px;">
                                            <table id="listReport" class="bt-table table-striped"
                                                data-side-pagination="server"
                                                data-pagination="true"
                                                data-page-size="10"
                                                data-page-list="[10, 20, 30]"
                                                data-search="true">
                                            </table>
                                        </div>
                                    </div>
								</div>
							</div>
							<!-- END EXAMPLE TABLE PORTLET-->
						</div>
					</div>
			</div>
			
	</div>	
    <div id="modalListSeats" class="modal container hide fade">
        <div class="modal-header">
            <button data-dismiss="modal" class="close" type="button">X</button>
            <h3 id='titleCatalog'>Listado de Asientos</h3>
        </div>
        <div class="modal-body">             
            <div class="row-fluid">
                <div class="control-group span12 ">
                    <table id="listSeats" class="bt-table table-striped"
                        data-side-pagination="server"
                        data-pagination="true"
                        data-page-size="10"
                        data-page-list="[10, 40, 60]"
                        data-search="true">
                    </table>
                </div>                   					
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn dark btn-outline" data-dismiss="modal">Cerrar</button>
        </div>
    </div>

<% include partials/footer %>
<script type="text/javascript">
	$(document).ready(function(){
        $('#busId').select2({});
        $("#busId").on("select2-opening", function() {
			$('.select2').select2("close");
        });
        $("#busId").change(function() {
			refreshTable()	
        });
        $("#aasNumberSeat").change(function() {
			refreshTable()	
        });
        $("#aasNameSeat").change(function() {
			refreshTable()	
        });

        <% if(business.length == 0) { %>

        <%} else {%>
            handleTableData();   
        <% }%>
        handleDateRangePickers();
        $(".accountId" ).on( "keydown", function(event) {
            if(event.which == 13 && $(this).val().length > 0){
                fnSearch($(this))
            }         
        });
        getCatalog()
	});
    isFirtsDatatable = true;
    $("#exporttable").click(function(e){
        showIsLoading("Procesando...");
        $.ajax({
            type: "GET",
            url: '/contab/getReportMovementebyAccount/'+$('#busId').val()+'?exportAll=true&'+$('#report').serialize(),
            beforeSend: function(){ //se muestra una imagen mientras el ajax se ejecuta
                showIsLoading("Procesando...");
            }
        }).done(function (result) {  
            console.log(result)
            dataResponse = new Array();
            dataYear = encodeURIComponent("&uacute;")
            console.log(dataYear)
            for(i=0; i<result.rows.length; i++ ){
                dataResponse.push({
                    "Usuario" :result.rows[i].accountingAccountSeat.user.useName, 
                    "Año" : result.rows[i].accountingAccountSeat.aasYear, 
                    "Mes": result.rows[i].accountingAccountSeat.aasMonth, 
                    "Fecha de Registro": formaterDate(result.rows[i].accountingAccountSeat.updatedAt), 
                    "Fecha de asiento": formaterDate(result.rows[i].accountingAccountSeat.aasDateSeat),
                    "Número de asiento" : result.rows[i].accountingAccountSeat.aasNumberSeat,
                    "Nombre": result.rows[i].accountingAccountSeat.aasNameSeat,
                    "Tipo Documento": result.rows[i].documentType.docName,
                    "Número Documento":result.rows[i].aasdNumberDoc,
                    "Código Cuenta": result.rows[i].accountingAccount.aacCode,
                    "Nombre Cuenta": result.rows[i].accountingAccount.aacName,
                    "Detalle de registro":result.rows[i].aasdDescription,
                    "Moneda": result.rows[i].moneyType.monName,
                    "Tipo Cambio":result.rows[i].aasdChangeValue,
                    "Débito":formaterNumber(result.rows[i].aasdDebit),
                    "Crédito": formaterNumber(result.rows[i].aasdCredit)
                })
            }
            JSONToCSVConvertor(dataResponse, "Reporte de Movimientos por Cuenta", true);
            hideIsLoading();                                         
        }).fail(function (data) {
            hideIsLoading();
            fnOpenErrorDialog(data.responseJSON.message);
        })                
    });
	function handleTableData () {
        
		$('#listReport').bootstrapTable({
			height: getHeight(),
			method: 'GET',
			url: '/contab/getReportMovementebyAccount/'+$('#busId').val()+'?'+$('#report').serialize(),
            cache: false,
            search: false,
			columns: [
                {
					field: 'accountingAccountSeat.user.useName',
					title: 'Usuario',
					sortable: false,
					width: '5%'
                },
                {
					field: 'accountingAccountSeat.aasYear',
					title: 'Año',
					sortable: false,
					width: '2%'
                },
                {
					field: 'accountingAccountSeat.aasMonth',
					title: 'Mes',
					sortable: false,
					width: '2%'
                },
                {
					field: 'accountingAccountSeat.updatedAt',
					title: 'Fecha de Registro',
					sortable: false,
                    width: '7%',
                    formatter: formaterDate 
                },
				{
					field: 'accountingAccountSeat.aasDateSeat',
					title: 'Fecha de asiento',
					sortable: false,
                    width: '7%',
                    formatter: formaterDate 
                },
                {
					field: 'accountingAccountSeat.aasNumberSeat',
					title: 'Número de asiento',
					sortable: false,
					width: '5%'
				},{
					field: 'accountingAccountSeat.aasNameSeat',
					title: 'Nombre',
					sortable: false,
					width: '5%'
				},{
					field: 'documentType.docName',
					title: 'Tipo Documento',
					sortable: false,
                    width: '5%' 
				}, {
					field: 'aasdNumberDoc',
					title: 'Número Documento',
					sortable: false,
                    width: '5%' 
				},{
					field: 'accountingAccount.aacCode',
					title: 'Código Cuenta',
					sortable: false,
					width: '6%' 
				},{
					field: 'accountingAccount.aacName',
					title: 'Nombre Cuenta',
					sortable: false,
                    width: '10%'                    
				},{
					field: 'aasdDescription',
					title: 'Detalle de registro',
					sortable: false,
                    width: '15%'
				} , {
					field: 'moneyType.monName',
					title: 'Moneda',
					sortable: false,
					width: '3%'
				}, {
					field: 'aasdChangeValue',
					title: 'Tipo Cambio',
					sortable: false,
					width: '4%'
				},{
					field: 'aasdDebit',
					title: 'Débito',
					sortable: false,
                    width: '7%',
                    align: 'right',
                    formatter: operateFormatterAasdDebit
				} ,{
					field: 'aasdCredit',
					title: 'Crédito',
					sortable: false,
                    width: '7%', 
                    align: 'right',
                    formatter: operateFormatterAasdCredit
				}              
			]
		});
	};
	function getHeight() {
		return 440;
    }
    
    function operateFormatterEdit(value, row, index) {
        return [
            "<button type='button' class='btn green'",
            " onclick='seeDetail("+ row.aasId +")'>",
            "<i class='icon-table'></i> ",
           "Ver detalle",
            "</button>"
        ].join('');
    }

    function refreshTable() {
        $('#listReport').bootstrapTable('refreshOptions', {url: '/contab/getReportMovementebyAccount/'+$('#busId').val()+'?'+$('#report').serialize()});
    }

    function seeDetail(id){
        if(isFirtsDatatable){
            handleTableDataDetails(id)
        } else{
            refreshTableDetails(id)
        }
        $('#modalListSeats').modal('show');
    }

	function handleTableDataDetails(id) {
        isFirtsDatatable = false
		$('#listSeats').bootstrapTable({
			height: $(window).height(),
			method: 'GET',
			url: '/contab/getListSeats/'+id, //$('#aasId').val(),
            cache: false,
            search: false,
			columns: [
				{
					field: 'documentType.docName',
					title: 'Tipo Documento',
					sortable: false,
                    width: '5%' 
				}, {
					field: 'aasdNumberDoc',
					title: 'Número Documento',
					sortable: false,
                    width: '5%' 
				}, {
					field: 'moneyType.monName',
					title: 'Moneda',
					sortable: false,
					width: '3%'
				}, {
					field: 'aasdChangeValue',
					title: 'Tipo Cambio',
					sortable: false,
					width: '4%'
				},{
					field: 'accountingAccount.aacCode',
					title: 'Cuenta',
					sortable: false,
					width: '10%' 
				},{
					field: 'aasdDescription',
					title: 'Detalle de registro',
					sortable: false,
					width: '15%' 
				} ,{
					field: 'aasdDebit',
					title: 'Débito',
					sortable: false,
                    width: '7%',
                    align: 'right',
                    formatter: operateFormatterAasdDebit
				} ,{
					field: 'aasdCredit',
					title: 'Crédito',
					sortable: false,
                    width: '7%', 
                    align: 'right',
                    formatter: operateFormatterAasdCredit
				}                 
			]
		});
    };

    function refreshTableDetails(id) {
        $('#listSeats').bootstrapTable('refresh', {url: '/contab/getListSeats/'+id});
    }

    function operateFormatterAasdDebit(value, row, index) {
        return [
        formaterNumber(row.aasdDebit)
        ].join('');
    }

    function operateFormatterAasdCredit(value, row, index) {
        return [
        formaterNumber(row.aasdCredit)
        ].join('');
    }

    function formaterNumber(dataNumber){
        dataNumber = dataNumber+""
        dataNumber = dataNumber.replace(/[^0-9\.]+/g, "");
        dataNumber = dataNumber *1
        dataNumber = dataNumber.toFixed(2)
        return dataNumber.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    }

    var handleDateRangePickers = function () {

		$('#fdate').daterangepicker(
			{
				ranges: {
					'Hoy': ['today', 'today'],
					'Ayer': ['yesterday', 'yesterday'],
					'Últimos 7 Días': [Date.today().add({
						days: -6
					}), 'today'],
					'Mes Actual': [Date.today().moveToFirstDayOfMonth(), Date.today().moveToLastDayOfMonth()],
					'Mes Anterior': [Date.today().moveToFirstDayOfMonth().add({
						months: -1
					}), Date.today().moveToFirstDayOfMonth().add({
						days: -1
					})]
				},
				opens: (false ? 'left' : 'right'),
				format: 'dd/MM/yyyy',
				separator: ' to ',
				minDate: '-20y',
				maxDate: '+1y',
				locale: {
					applyLabel: 'Aceptar',
					clearLabel: "Limpiar",
					fromLabel: 'Desde',
					toLabel: 'Hasta',
					customRangeLabel: 'Rango Fechas',
					daysOfWeek: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sa'],
					monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
					firstDay: 1,
				},
				allowClear: true,
				showWeekNumbers: true,
				applyClass: 'blue',
				clearClass: 'green',
				buttonClasses: ['btn-danger']
			},
			function (start, end) {
				var startToString = start.toString('dd/MM/yyyy');
				var endToString = end.toString('dd/MM/yyyy');
				var startIsTrue = $.trim(startToString).length > 0;
				var endIsTrue = $.trim(endToString).length > 0;

				$('#fdate span').html(((startIsTrue && endIsTrue) ? startToString + ' - ' + endToString : ''));
				$('#date_from').val(startToString);
				$('#date_to').val(endToString);
                refreshTable()	
				_modificationInitDate = start.toString('yyyy/MM/dd');
				_modificationEndDate = end.toString('yyyy/MM/dd');
				//checkDateDays(2);
			}
		);
	};

    function getCatalog(){
        $.ajax({
            type: "GET",
            url: "/contab/getOneCatalog/"+$('#busId').val(),
            beforeSend: function(){ //se muestra una imagen mientras el ajax se ejecuta
                showIsLoading("Procesando...");
            }
        }).done(function (result) {            
            hideIsLoading(); 
            console.log(result)
            if(result.accountCatalog.accIdFk >0){
                actualCatalog = result.accountCatalog.accIdFk;
                $('#accId').val(result.accountCatalog.accIdFk)
                //ahora definir lo de la mascara de la cuenta
                showData(result.accountCatalog.accountingCatalog)
            }
            else{
                fnOpenErrorDialog("Para este periodo no se ha definido un catalogo contable.")
            }
        }).fail(function (data) {
            fnOpenErrorDialog(data.responseJSON.message);
            hideIsLoading();            
        })
    }

    function showData(accountCatalog){
        jsonData = JSON.parse(accountCatalog.accNivels)
        accSeparator = accountCatalog.accSeparator        
        // queda pendiente lo de nombre de la cuenta??? y el length
        //crear la mascara
        dataMask = ''
        for(var a=1;  a<=jsonData.accNivel1; a++){																	
            dataMask = dataMask+'9'		
        }
        if(jsonData.accNivel2){
            dataMask = dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel2; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel3){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel3; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel4){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel4; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel5){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel5; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel6){
            dataMask = dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel6; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel7){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel7; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel8){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel8; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel9){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel9; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel10){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel10; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel11){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel11; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        if(jsonData.accNivel12){
            dataMask=dataMask+accSeparator
            for(var a=1;  a<=jsonData.accNivel12; a++){																	
                dataMask = dataMask+'9'		
            }
        }
        console.log('defnidia la mascara',dataMask)
        $(".accountId").inputmask("mask", {"mask": dataMask, "clearIncomplete": false ,'removeMaskOnSubmit': true, 'autoUnmask': true});
    }

    function fnSearch(data){
        console.log(data.val())
        newAccount = data.val();
        search =false;
        nivel2= jsonData.accNivel1*1+jsonData.accNivel2*1
        nivel3= nivel2+jsonData.accNivel3*1
        nivel4= nivel3+jsonData.accNivel4*1
        nivel5= nivel4+jsonData.accNivel5*1
        nivel6= nivel5+jsonData.accNivel6*1
        nivel7= nivel6+jsonData.accNivel7*1
        nivel8= nivel7+jsonData.accNivel8*1
        nivel9= nivel8+jsonData.accNivel9*1
        nivel10= nivel9+jsonData.accNivel10*1
        nivel11= nivel10+jsonData.accNivel11*1
        nivel12= nivel11+jsonData.accNivel12*1
        if(newAccount.length<jsonData.accNivel1){
            newAccount = createAccount(newAccount, jsonData.accNivel1, 0)
            search =true; 
        }
        if( newAccount.length== jsonData.accNivel1 || newAccount.length== nivel2 || newAccount.length==nivel3 || newAccount.length==nivel4 || newAccount.length==nivel5 || 
            newAccount.length== nivel6 || newAccount.length==nivel7 || newAccount.length==nivel8 || newAccount.length==nivel9 || newAccount.length== nivel10 || newAccount.length==nivel11 || newAccount.length==nivel12){
            newAccount=putMask(newAccount)
            search =true;            
        }
        else{
           
            if(newAccount.length<nivel2){
                newAccount =  createAccount(newAccount, nivel2, jsonData.accNivel1)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel3){
                newAccount =  createAccount(newAccount, nivel3, nivel2)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel4){
                newAccount =  createAccount(newAccount, nivel4, nivel3)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel5){
                newAccount =  createAccount(newAccount, nivel5, nivel4)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel6){
                newAccount =  createAccount(newAccount, nivel6, nivel5)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel7){
                newAccount =  createAccount(newAccount, nivel7, nivel6)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel8){
                newAccount =  createAccount(newAccount, nivel8, nivel7)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel9){
                newAccount =  createAccount(newAccount, nivel9, nivel8)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel10){
                newAccount =  createAccount(newAccount, nivel10, nivel9)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel11){
                newAccount =  createAccount(newAccount, nivel11, nivel10)
                search =true;
                newAccount=putMask(newAccount) 
            }
            else if(newAccount.length<nivel12){
                newAccount =  createAccount(newAccount, nivel12, nivel11)
                search =true;
                newAccount=putMask(newAccount) 
            }
        }
        if(search){
            //obtener el nombre del nivel si existe
            $.ajax({
                type: "GET",
                url: "/contab/getAccountingAccountSearch/"+$('#accId').val()+"?aacCode="+newAccount+"&aacNivelFirst="+$('#aacNivelFirst').val()+"&levelToSave="+$('#levelToSave').val()+"&aacNivelBefore="+$('#aacNivelBefore').val(),       
                beforeSend: function(){ //se muestra una imagen mientras el ajax se ejecuta
                    showIsLoading("Procesando...");
                }
            }).done(function (result) {  
                data.val(newAccount)
                if(result.accountingAccount!=null){
                    console.log(result.accountingAccount.aacName)
                    $('#divTextAccount').html(result.accountingAccount.aacName);
                    $('#aacId').val(result.accountingAccount.aacId);
                    $('#aacCode').val(result.accountingAccount.aacCode);
                    refreshTable()	
                }
                else{
                    $('#divTextAccount').html('');
                    $('#aacId').val('')
                }

                if($('#levelToSave').val()>1 &&  result.accountingAccountRaiz!=null){
                    $('#aacType').val(result.accountingAccountRaiz.aacType).trigger('change');
                    $('#aacType').prop( "disabled", true );
                }
                //aacNivelBefore
                if($('#levelToSave').val()>1 && result.accountingAccountRaizPrevios==null) {
                    fnOpenErrorDialog("La cuenta digitada, no se ha registrado la cuenta padre "+$('#aacNivelBefore').val());
                }
                hideIsLoading();                                         
            }).fail(function (data) {
                hideIsLoading();
                fnOpenErrorDialog(data.responseJSON.message);
            })
        }
    }

    function createAccount(newAccount, accNivel, previousLevel){
        dataVal = newAccount
        diference= accNivel - newAccount.length
        if(previousLevel>0){
            dataVal = ''
            ultimo=''
            countDiference =0
            for(a=0; a<accNivel; a++){
                if(previousLevel> a){
                    dataVal =dataVal + newAccount.charAt(a)
                }
                else{
                    ultimo = ultimo + newAccount.charAt(a)
                    if(countDiference <diference){
                        dataVal = dataVal +'0'
                        countDiference =countDiference +1
                    }                    
                }               
            }
            dataVal = dataVal +ultimo

        }
        else{
            for(a=newAccount.length; a<accNivel; a++){
                dataVal = '0'+dataVal
            }
        }        
        // $('#aacCode').val(dataVal)
        return dataVal
    }

    function putMask(dataMask){
        newDataWithMask =''
        nivel2= jsonData.accNivel1*1+jsonData.accNivel2*1
        nivel3= nivel2+jsonData.accNivel3*1
        nivel4= nivel3+jsonData.accNivel4*1
        nivel5= nivel4+jsonData.accNivel5*1
        nivel6= nivel5+jsonData.accNivel6*1
        nivel7= nivel6+jsonData.accNivel7*1
        nivel8= nivel7+jsonData.accNivel8*1
        nivel9= nivel8+jsonData.accNivel9*1
        nivel10= nivel9+jsonData.accNivel10*1
        nivel11= nivel10+jsonData.accNivel11*1
        nivel12= nivel11+jsonData.accNivel12*1
        levelToSave = 1
        for(var a=0;  a<dataMask.length; a++){	
            if(jsonData.accNivel1==a||nivel2==a||nivel3==a||nivel4==a||nivel5==a||nivel6==a||nivel7==a||nivel8==a||nivel9==a||nivel10==a||nivel11==a||nivel12==a){
                levelToSave = levelToSave+1
                newDataWithMask = newDataWithMask+accSeparator
            }	            															
            newDataWithMask = newDataWithMask+dataMask.charAt(a)		
        }   
        // debo buscar el primer nivel para el manejo de tipo de cuenta y saldo y bloquear tipo de cuenta
        return newDataWithMask
    }

</script>